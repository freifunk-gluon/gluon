#!/usr/bin/lua

local site = require 'gluon.site'
local util = require 'gluon.util'

local uci = require('simple-uci').cursor()


local syslog_level = uci:get('fastd', 'mesh_vpn', 'syslog_level') or 'verbose'

local methods

if site.mesh_vpn.fastd.configurable(false) then
	local has_null = util.contains(site.mesh_vpn.fastd.methods(), 'null')

	local old_methods = uci:get('fastd', 'mesh_vpn', 'method')
	if old_methods then
		has_null = util.contains(old_methods, 'null')
	end

	methods = {}
	if has_null then
		table.insert(methods, 'null')
	end

	for _, method in ipairs(site.mesh_vpn.fastd.methods()) do
		if method ~= 'null' then
			table.insert(methods, method)
		end
	end

else
	methods = site.mesh_vpn.fastd.methods()
end


uci:section('fastd', 'fastd', 'mesh_vpn', {
	group = 'gluon-mesh-vpn',
	syslog_level = syslog_level,
	interface = 'mesh-vpn',
	mode = 'tap',
	mtu = site.mesh_vpn.mtu(),
	secure_handshakes = true,
	method = methods,
	packet_mark = 1,
	status_socket = '/var/run/fastd.mesh_vpn.socket',
})
uci:delete('fastd', 'mesh_vpn', 'user')


local add_groups

local function add_peer(group, name, config)
	uci:section('fastd', 'peer', group .. '_peer_' .. name, {
		enabled = true,
		net = 'mesh_vpn',
		group = group,
		key = config.key,
		remote = config.remotes,
	})
end

local function add_group(name, config, parent)
	uci:delete('fastd', name)
	uci:delete_all('fastd', 'peer',	function(peer)
		return (peer.net == 'mesh_vpn' and peer.group == name)
	end)


	uci:section('fastd', 'peer_group', name, {
		enabled = true,
		net = 'mesh_vpn',
		parent = parent,
		peer_limit = config.limit,
	})

	if config.peers then
		for peername, peerconfig in pairs(config.peers) do
			add_peer(name, peername, peerconfig)
		end
	end

	add_groups(name, config.groups, name)
end

-- declared local above
function add_groups(prefix, groups, parent)
	if groups then
		for name, group in pairs(groups) do
			add_group(prefix .. '_' .. name, group, parent)
		end
	end
end

-- Checks if a peer or peer group entry belongs to the node2node VPN feature
local function is_n2n(gp)
	if gp and gp['.name']:find('n2n_vpn') then return true end
	return false
end

--- Determine peers and peer groups from the old configuration that can be removed
	-- @param group		Peer group as returned by uci:foreach or 'nil' for ALL
	-- @param deln2n	Set 'true' for adding node2node VPN groups else 'false'
	-- @return      	Array with first index being boolean indicating whether
	--			any n2n peer groups have been restrained and second
	--			being an array with the names of the items to delete.
local function get_delgroups(group, deln2n)
	if not deln2n and is_n2n(group) then
		return false
	end

	local group_empty = true
	local dellist = {}

	if group then
		uci:foreach('fastd', 'peer', function(peer)
			if peer.group == group['.name'] then
				if not deln2n and is_n2n(peer) then
					group_empty = false
				else
					table.insert(dellist, peer['.name'])
				end
			end

		end)
	end

	uci:foreach('fastd', 'peer_group', function(gr)
		if gr.parent == group or gr.parent == group['.name'] then
			local ret = get_delgroups(gr, deln2n)
			for _, v in pairs(ret[2]) do table.insert(dellist, v) end
			if ret[1] then
				table.insert(dellist, gr['.name'])
			else
				group_empty = false
			end
		end

	end)

	return {group_empty, dellist}
end

if site.mesh_vpn.fastd.sysupgrade_remove_old_peers then
	local del = get_delgroups(nil, site.mesh_vpn.fastd.sysupgrade_remove_n2n_peers)
	for _, v in pairs(del[2]) do uci:delete('fastd', v) end
elseif site.mesh_vpn.fastd.sysupgrade_remove_n2n_peers then
	uci:delete_all('fastd', 'peer', is_n2n)
	uci:delete_all('fastd', 'peer_group', is_n2n)
end

add_groups('mesh_vpn', site.mesh_vpn.fastd.groups())


uci:save('fastd')
