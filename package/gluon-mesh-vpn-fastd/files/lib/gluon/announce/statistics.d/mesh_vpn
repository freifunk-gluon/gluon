local json = require 'luci.json'
local ltn12 = require 'luci.ltn12'
local nixio = require 'nixio'
local site = require 'gluon.site_config'
local uci = require('luci.model.uci').cursor()

local fastd_sock = nixio.socket('unix', 'stream')
local socket_path = uci:get('fastd', 'mesh_vpn', 'status_socket')

if not fastd_sock:connect(socket_path) then
  return nil
end

local decoder = json.Decoder()
ltn12.pump.all(ltn12.source.file(fastd_sock), decoder:sink())

local status = decoder:get()


local peer_groups

local function peer_connection(config)
  local peer = status.peers[config.key]
  if peer then
    if peer.connection then
      return {
        established = peer.connection.established/1000
      }
    else
      return json.null
    end
  end
end

local function peer_group(config)
  local ret = {}

  if config.peers then
    local peers = {}

    for peername, peerconfig in pairs(config.peers) do
      peers[peername] = peer_connection(peerconfig)
    end

    if next(peers) then
      ret.peers = peers
    end
  end

  ret.groups = peer_groups(config.groups)

  if next(ret) then
    return ret
  end
end

function peer_groups(groups)
  if groups then
    local ret = {}

    for name, group in pairs(groups) do
      ret[name] = peer_group(group)
    end

    if next(ret) then
      return ret
    end
  end
end

return peer_group(site.fastd_mesh_vpn)
