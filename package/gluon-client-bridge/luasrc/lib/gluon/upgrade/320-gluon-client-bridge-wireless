#!/usr/bin/lua

local wireless = require 'gluon.wireless'
local uci = require('simple-uci').cursor()
local util = require "gluon.util"

local client_only_radio = {band_2g=0, band_5g=0, band_6g=0}

local function count_band(band)
	client_only_radio[band] = client_only_radio[band] + 1
end

wireless.foreach_radio(uci, function(radio, _, config)
	if not wireless.supports_channel(radio, config.channel()) then
		count_band("band_" .. radio.band)
	end
end)

local function is_disabled(radio, config)
	-- now we assign radios to roles
	local band = radio.band
	local roles = wireless.radio_roles(uci, radio)
	-- if there is a radio which does not support the mesh channel, we can configure it on a different channel
	-- in this case, the other radio on the same band supporting the channel turns off its client radio and is mesh only
	local disable_client = wireless.supports_channel(radio, config.channel()) and client_only_radio['band_' .. band] > 0

	return not util.contains(roles, 'client') or disable_client
end

local function configure_ap(radio, index, radio_name, ssid)
	local name = 'client_' .. radio_name
	local suffix = radio_name:match('^radio(%d+)$')

	local macaddr = wireless.get_wlan_mac('client', index, radio)

	if not ssid or not macaddr or not suffix then
		return
	end

	uci:section('wireless', 'wifi-iface', name, {
		device = radio_name,
		network = 'client',
		mode = 'ap',
		ssid = ssid,
		macaddr = macaddr,
		ifname = 'client' .. suffix,
	})
end

local function configure_owe(radio, index, radio_name, ssid)
	local name = 'owe_' .. radio_name
	local suffix = radio_name:match('^radio(%d+)$')

	-- Don't configure OWE in case our device
	-- can't do MFP, as it's mandatory for OWE.
	if not wireless.device_supports_mfp(uci) then
		return
	end

	local macaddr = wireless.get_wlan_mac('owe', index, radio)

	if not ssid or not macaddr or not suffix then
		return
	end

	uci:section('wireless', 'wifi-iface', name, {
		device = radio_name,
		network = 'client',
		mode = 'ap',
		ssid = ssid,
		macaddr = macaddr,
		ifname = 'owe' .. suffix,
		encryption = 'owe',
		ieee80211w = 2,
	})
end

local function configure_owe_transition_mode(radio_name)

	-- Don't configure OWE in case our device
	-- can't do MFP, as it's mandatory for OWE.
	if not wireless.device_supports_mfp(uci) then
		return
	end

	local name_client = 'client_' .. radio_name
	local name_owe = 'owe_' .. radio_name

	local ifname_client = uci:get('wireless', name_client, 'ifname')
	local ifname_owe = uci:get('wireless', name_owe, 'ifname')

	if not (ifname_client and ifname_owe) then
		return
	end

	uci:set('wireless', name_client, 'owe_transition_ifname', ifname_owe)
	uci:set('wireless', name_owe, 'owe_transition_ifname', ifname_client)

	uci:set('wireless', name_owe, 'hidden', '1')
end

wireless.foreach_radio(uci, function(radio, index, config)
	local radio_name = radio['.name']

	if not is_disabled(radio, config)  then
		-- 6ghz does not support unencrypted client ifaces
		if radio.band == '6g' then
			configure_owe(radio, index, radio_name, config.ap.ssid())
		else
			configure_ap(radio, index, radio_name, config.ap.ssid())
			configure_owe(radio, index, radio_name, config.ap.owe_ssid())
			if config.ap.owe_transition_mode(false) then
				configure_owe_transition_mode(radio_name)
			end
		end
	end
end)

uci:save('wireless')
