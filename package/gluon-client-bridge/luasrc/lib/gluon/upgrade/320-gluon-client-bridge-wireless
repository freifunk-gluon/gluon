#!/usr/bin/lua

local wireless = require 'gluon.wireless'
local uci = require('simple-uci').cursor()
local util = require "gluon.util"


local function is_disabled(radio, config)
	-- now we assign radios to roles
	local band = radio.band
	local roles = uci:get_list('gluon', 'band_' .. band, 'role')
	-- if there is a radio which does not support the mesh channel, we can configure it on a different channel
	-- in this case, the other radio on the same band supporting the channel turns off its client radio and is mesh only
	local disable_client = wireless.supports_channel(radio, config.channel())
	return not util.contains(roles, 'client') or disable_client
end

local function configure_ap(radio, index, config, radio_name)
	local name = 'client_' .. radio_name
	local suffix = radio_name:match('^radio(%d+)$')

	local ap = config.ap

	local macaddr = wireless.get_wlan_mac('client', index, radio)

	if not ap.ssid() or not macaddr or not suffix then
		return
	end

	uci:section('wireless', 'wifi-iface', name, {
		device = radio_name,
		network = 'client',
		mode = 'ap',
		ssid = ap.ssid(),
		macaddr = macaddr,
		ifname = 'client' .. suffix,
	})
end

local function configure_owe(radio, index, config, radio_name)
	local name = 'owe_' .. radio_name
	local suffix = radio_name:match('^radio(%d+)$')

	local ap = config.ap

	-- Don't configure OWE in case our device
	-- can't do MFP, as it's mandatory for OWE.
	if not wireless.device_supports_mfp(uci) then
		return
	end

	local macaddr = wireless.get_wlan_mac('owe', index, radio)

	if not ap.owe_ssid() or not macaddr or not suffix then
		return
	end

	uci:section('wireless', 'wifi-iface', name, {
		device = radio_name,
		network = 'client',
		mode = 'ap',
		ssid = ap.owe_ssid(),
		macaddr = macaddr,
		ifname = 'owe' .. suffix,
		encryption = 'owe',
		ieee80211w = 2,
	})
end

local function configure_owe_transition_mode(config, radio_name)
	local ap = config.ap

	-- Don't configure OWE in case our device
	-- can't do MFP, as it's mandatory for OWE.
	if not wireless.device_supports_mfp(uci) then
		return
	end

	if not ap.owe_transition_mode(false) then
		return
	end

	local name_client = 'client_' .. radio_name
	local name_owe = 'owe_' .. radio_name

	local ifname_client = uci:get('wireless', name_client, 'ifname')
	local ifname_owe = uci:get('wireless', name_owe, 'ifname')

	if not (ifname_client and ifname_owe) then
		return
	end

	uci:set('wireless', name_client, 'owe_transition_ifname', ifname_owe)
	uci:set('wireless', name_owe, 'owe_transition_ifname', ifname_client)

	uci:set('wireless', name_owe, 'hidden', '1')
end

wireless.foreach_radio(uci, function(radio, index, config)
	local radio_name = radio['.name']
	if not is_disabled(radio, config) then
		configure_ap(radio, index, config, radio_name)

		configure_owe(radio, index, config, radio_name)
		configure_owe_transition_mode(config, radio_name)
	end
end)

uci:save('wireless')
